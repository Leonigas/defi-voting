{"version":3,"sources":["getWeb3.js","components/ListProposals.js","components/ListVoters.js","components/Winner.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","ListProposals","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","this","props","proposals","map","React","Component","ListVoters","voters","Winner","winner","STATUS","REG_VOTERS","REG_PROPOSALS","END_REG","VOTING","END_VOTING","TALLY","App","state","accounts","contract","enumStatus","name","color","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","setState","runInit","alert","error","updateVoters","methods","_voters","call","voter","getAddresses","updateProposals","getProposals","updateStatus","status","statusName","statusColor","updateWinner","winningProposalId","getWinner","events","VoterRegistered","on","event","ProposalRegistered","WorkflowStatusChange","VotesTallied","owner","ownerAddress","registerVoter","value","send","from","registerProposal","proposal","vote","vote_choice","tally","nextStatus","parseInt","startProposalregistration","endProposalregistration","startVotingSession","endVotingSession","startVotersregistration","className","type","class","onClick","Form","Group","controlId","Control","id","ref","input","Button","role","isRegistered","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a1d3ff99.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nclass ListProposals extends React.Component {\r\n    render() {\r\n      return <div>\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n            <Card style={{ width: '50rem' }}>\r\n                <Card.Header><strong>Liste des propositions</strong></Card.Header>\r\n                <Card.Body>\r\n                <ListGroup variant=\"flush\">\r\n                    <ListGroup.Item>\r\n                    <Table striped bordered hover>\r\n                        <tbody>\r\n                        { this.props.proposals.map((a) => <tr><td>{a}</td></tr>) }\r\n                        </tbody>\r\n                    </Table>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n                </Card.Body>\r\n            </Card>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ListProposals;\r\n\r\n","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nclass ListVoters extends React.Component {\r\n    render() {\r\n      return <div>\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                <Card style={{ width: '50rem' }}>\r\n                <Card.Header><strong>Liste des votants</strong></Card.Header>\r\n                <Card.Body>\r\n                    <ListGroup variant=\"flush\">\r\n                    <ListGroup.Item>\r\n                        <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                            <th>@</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.props.voters !== null &&\r\n                            this.props.voters.map((a) => <tr><td>{a}</td></tr>)\r\n                            }\r\n                        </tbody>\r\n                        </Table>\r\n                    </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Card.Body>\r\n                </Card>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ListVoters;\r\n\r\n","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass Winner extends React.Component {\r\n    render() {\r\n      return <div>\r\n                <p>Le gagnant est :</p>\r\n                <h1>{ this.props.winner[0] }</h1>\r\n                <p>Avec { this.props.winner[1] } voix</p>\r\n            </div>;\r\n    }\r\n}\r\n\r\nexport default Winner;\r\n\r\n","import React, { Component } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Card from 'react-bootstrap/Card';\r\nimport VotingContract from \"./contracts/Voting.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport ListProposals from \"./components/ListProposals\";\r\nimport ListVoters from \"./components/ListVoters\";\r\nimport Winner from \"./components/Winner\";\r\n\r\nimport \"./App.css\";\r\n\r\nexport const STATUS = {\r\n  REG_VOTERS: 0,\r\n  REG_PROPOSALS: 1,\r\n  END_REG: 2,\r\n  VOTING: 3,\r\n  END_VOTING: 4,\r\n  TALLY: 5,\r\n}\r\n\r\nclass App extends Component {\r\n  state = { web3: null, accounts: null, contract: null, voters: null };\r\n\r\n  enumStatus = [\r\n    { name: \"Enregistrement des électeurs\", color: \"primary\" },\r\n    { name: \"Enregistrement des propositions\", color: \"secondary\" },\r\n    { name: \"Fin des propositions\", color: \"dark\" },\r\n    { name: \"Début du vote\", color: \"info\" },\r\n    { name: \"Fin du vote\", color: \"light\" },\r\n    { name: \"Décompte fait\", color: \"success\" }\r\n  ];\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = VotingContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        VotingContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, accounts, contract: instance }, this.runInit);\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Met à jour les informations du votant arpès l'évèment VoterRegistered\r\n   */\r\n  updateVoters = async () => {\r\n    const { accounts, contract } = this.state;\r\n    const voter = await contract.methods._voters(accounts[0]).call()\r\n    const voters = await contract.methods.getAddresses().call()\r\n    this.setState({ voter: voter, voters: voters })\r\n  }\r\n\r\n  /**\r\n   * Met à jour les propositions après l'évènement ProposalRegistered \r\n   */\r\n  updateProposals = async () => {\r\n    const { contract } = this.state;\r\n    const proposals = await contract.methods.getProposals().call()\r\n    this.setState({ proposals: proposals})\r\n  }\r\n\r\n  updateStatus = async () => {\r\n    const { contract } = this.state;\r\n    const status = await contract.methods.status().call()\r\n    const statusName = this.enumStatus[status].name\r\n    const statusColor = this.enumStatus[status].color\r\n    this.setState({ status: status, statusName: statusName, statusColor: statusColor })\r\n  }\r\n\r\n  updateWinner = async () => {\r\n    const { contract } = this.state;\r\n\r\n    const winningProposalId = await contract.methods.winningProposalId().call();  \r\n    const winner = await contract.methods.getWinner().call();\r\n\r\n    this.setState({  winningProposalId: winningProposalId, winner:winner })\r\n  }\r\n\r\n  runInit = async () => {\r\n    const { contract } = this.state;\r\n\r\n    // enregistrement des évènements\r\n    contract.events.VoterRegistered().on('data', (event) => this.updateVoters(event)).on('error', console.error);\r\n    contract.events.ProposalRegistered().on('data', (event) => this.updateProposals(event)).on('error', console.error);\r\n    contract.events.WorkflowStatusChange().on('data', (event) => this.updateStatus(event)).on('error', console.error);\r\n    contract.events.VotesTallied().on('data', (event) => this.updateWinner(event)).on('error', console.error);\r\n\r\n    this.updateStatus() // met à jour le status\r\n    this.updateVoters() // liste des votants et status du votant\r\n    this.updateProposals() // liste des propositions\r\n    this.updateWinner() // informations sur le gagnant\r\n\r\n    // données personnelles\r\n    const ownerAddress = await contract.methods.owner().call()\r\n\r\n    // Mettre à jour le state \r\n    this.setState({ ownerAddress: ownerAddress })  \r\n  }\r\n\r\n  /**\r\n   * Enregistre un nouveau votant\r\n   */\r\n  registerVoter = async () => {\r\n    const { accounts, contract } = this.state;\r\n    const address = this.address.value;\r\n\r\n    // Interaction avec le smart contract pour ajouter un compte \r\n    await contract.methods.registerVoter(address).send({from: accounts[0]});\r\n\r\n    // Vide le champs input address\r\n    this.address.value = null;\r\n  }\r\n\r\n  registerProposal = async () => {\r\n    const { accounts, contract } = this.state;\r\n    const proposal = this.proposal.value;\r\n\r\n    await contract.methods.registerProposal(proposal).send({from: accounts[0]});\r\n\r\n    // Vide le champs input proposal\r\n    this.proposal.value = null;\r\n  }\r\n\r\n  vote = async () => {\r\n    const { accounts, contract } = this.state;\r\n    const vote = this.vote_choice.value;\r\n\r\n    await contract.methods.vote(vote).send({from: accounts[0]});\r\n    \r\n    // Vide le champs input proposal\r\n    this.vote.value = null;\r\n  }\r\n\r\n  tally = async () => {\r\n    const { accounts, contract } = this.state;\r\n    await contract.methods.tally().send({from: accounts[0]});\r\n  }\r\n\r\n  nextStatus = async() => {\r\n    const { accounts, contract, status } = this.state;\r\n\r\n    switch(parseInt(status)) {\r\n      case STATUS.REG_VOTERS:\r\n        await contract.methods.startProposalregistration().send({from: accounts[0]});\r\n        break;\r\n      case STATUS.REG_PROPOSALS:\r\n          await contract.methods.endProposalregistration().send({from: accounts[0]});\r\n          break;\r\n      case STATUS.END_REG:\r\n        await contract.methods.startVotingSession().send({from: accounts[0]});\r\n        break;\r\n      case STATUS.VOTING:\r\n        await contract.methods.endVotingSession().send({from: accounts[0]});\r\n        break;\r\n      case STATUS.END_VOTING:\r\n          await contract.methods.tally().send({from: accounts[0]});\r\n          break;\r\n      case STATUS.TALLY:\r\n        await contract.methods.startVotersregistration().send({from: accounts[0]});\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { accounts, status, voters, statusColor, statusName, ownerAddress, voter, proposals, winner } = this.state;\r\n\r\n    if (accounts && accounts[0] === ownerAddress) {\r\n      return (\r\n        <div className=\"App\">\r\n          <div className={\"alert alert-\" + statusColor +\" fade show\"}>\r\n            { statusName }\r\n          </div>\r\n\r\n          <div>\r\n              <h2 className=\"text-center\">Système de vote</h2>\r\n              <hr></hr>\r\n              <br></br>\r\n          </div>\r\n\r\n          <div>\r\n          { parseInt(status) !== STATUS.TALLY && (\r\n              <button type=\"button\" class=\"btn btn-primary\" onClick={ this.nextStatus } variant=\"light\" > Suivant </button>)}\r\n          </div>\r\n          \r\n          <br></br>\r\n\r\n          <ListVoters voters= {voters}></ListVoters>\r\n          <br></br>\r\n          { parseInt(status) === STATUS.REG_VOTERS && (<div style={{display: 'flex', justifyContent: 'center'}}>\r\n            <Card style={{ width: '50rem' }}>\r\n              <Card.Header><strong>Autoriser un nouveau compte</strong></Card.Header>\r\n              <Card.Body>\r\n                <Form.Group controlId=\"formAddress\">\r\n                  <Form.Control type=\"text\" id=\"address\"\r\n                  ref={(input) => { this.address = input }}\r\n                  />\r\n                </Form.Group>\r\n                <Button onClick={ this.registerVoter } variant=\"dark\" > Autoriser </Button>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>) }\r\n\r\n          { (parseInt(status) === STATUS.REG_PROPOSALS || parseInt(status) === STATUS.VOTING || parseInt(status) === STATUS.END_REG) && proposals && (<div>\r\n            <ListProposals proposals={proposals}></ListProposals>\r\n          </div>) }\r\n\r\n          { parseInt(status) === STATUS.END_VOTING && (<div>\r\n          <div style={{display: 'flex', justifyContent: 'center'}}>\r\n            <Card style={{ width: '50rem' }}>\r\n              <Card.Header><strong>Action</strong></Card.Header>\r\n              <Card.Body>\r\n                <Button onClick={ this.tally } variant=\"dark\" > Faire le décompte ! </Button>\r\n              </Card.Body>\r\n            </Card>\r\n          </div></div>) }\r\n\r\n          { parseInt(status) === STATUS.TALLY && winner && (<Winner winner={winner}></Winner>) }\r\n          <br></br>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n          <div className={\"alert alert-\" + statusColor +\" fade show\"}>\r\n          { statusName }\r\n        </div>\r\n\r\n        <div>\r\n          <h2 className=\"text-center\">Système de vote</h2>\r\n          <hr></hr>\r\n          <br></br>\r\n        </div>\r\n\r\n        { parseInt(status) === STATUS.REG_VOTERS && (<div>\r\n            <div className=\"alert alert-info alert-dismissible fade show\" role=\"alert\">L'administrateur est en train d'enregister les électeurs. Revenez plus tard ...</div>\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n              <Card style={{ width: '50rem' }}>\r\n                <Card.Header><strong>Entregistrement</strong></Card.Header>\r\n                <Card.Body>\r\n                  { voter && voter.isRegistered && (<p className='alert alert-success'>Vous êtes enregistré !</p>)}\r\n                  { (!voter || !voter.isRegistered) && (<p className='alert alert-danger'>Vous n'êtes pas encore enregistré.</p>)}\r\n                </Card.Body>\r\n              </Card>\r\n          </div></div>) }\r\n\r\n          { parseInt(status) === STATUS.REG_PROPOSALS && proposals && (<div>\r\n            { <ListProposals proposals={proposals}></ListProposals> }\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n              <Card style={{ width: '50rem' }}>\r\n                <Card.Header><strong>Enregistrez votre proposition</strong></Card.Header>\r\n                <Card.Body>\r\n                  <Form.Group controlId=\"formProposals\">\r\n                    <Form.Control type=\"text\" id=\"address\"\r\n                    ref={(input) => { this.proposal = input }}\r\n                    />\r\n                  </Form.Group>\r\n                  <Button onClick={ this.registerProposal } variant=\"dark\" > Enregistrer </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            </div></div>) }\r\n\r\n          { parseInt(status) === STATUS.END_REG  && proposals && (<div>\r\n            <div className=\"alert alert-info alert-dismissible fade show\" role=\"alert\">L'enregistrement des propositions est terminé. Revenez plus tard ...</div>\r\n            <ListProposals proposals={proposals}></ListProposals>\r\n          </div>)}\r\n\r\n          { parseInt(status) === STATUS.VOTING && proposals && (<div>\r\n            <ListProposals proposals={proposals}></ListProposals>\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n              <Card style={{ width: '50rem' }}>\r\n                <Card.Header><strong>Enregistrez votre vote</strong></Card.Header>\r\n                <Card.Body>\r\n                  <Form.Group controlId=\"formProposals\">\r\n                    <Form.Control type=\"text\" id=\"address\"\r\n                    ref={(input) => { this.vote_choice = input }}\r\n                    />\r\n                  </Form.Group>\r\n                  <Button onClick={ this.vote } variant=\"dark\" > Enregistrer </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            </div></div>)}\r\n\r\n          { parseInt(status) === STATUS.END_VOTING && (<div style={{display: 'flex', justifyContent: 'center'}}>\r\n            <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">Le vote est terminé ! L'administrateur fait le décompte ...</div>\r\n          </div>) }\r\n\r\n          { parseInt(status) === STATUS.TALLY && winner && (<Winner winner={winner}></Winner>) }\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}